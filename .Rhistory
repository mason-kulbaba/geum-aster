ml_deer<- read.csv("C:/Users/mason/Dropbox/git/students/Rachel Dziuba/data/deer_ml_data.csv")
require(gauseR)
# looks like telling R what is what (pred/prey), and what time vector is
prey_lagged<-get_lag(x = ml_deer$deer4, time = ml_deer$year)
# looks like telling R what is what (pred/prey), and what time vector is
prey_lagged<-get_lag(x = ml_deer$deer4, time = ml_deer$year)
head(ml_deer)
predator_lagged<-get_lag(x = ml_deer$ml_sight, time = ml_deer$year)
ml_deer<- read.csv("C:/Users/mason/Dropbox/git/students/Rachel Dziuba/data/deer_ml_data.csv")
ml_deer
require(gauseR)
# looks like telling R what is what (pred/prey), and what time vector is
prey_lagged<-get_lag(x = ml_deer$deer4, time = ml_deer$year)
predator_lagged<-get_lag(x = ml_deer$ml_sight, time = ml_deer$year)
# calculate percapita growth rates for each
prey_dNNdt<-percap_growth(x = prey_lagged$x, laggedx = prey_lagged$laggedx, dt = prey_lagged$dt)
predator_dNNdt<-percap_growth(x = predator_lagged$x,
laggedx = predator_lagged$laggedx, dt = predator_lagged$dt)
# fit linear models to dNNdt, based on average
# abundances between current and lagged time steps
prey_mod_dat<-data.frame(prey_dNNdt=prey_dNNdt, prey=prey_lagged$laggedx,
predator=predator_lagged$laggedx)
mod_prey<-lm(prey_dNNdt~prey+predator, data=prey_mod_dat)
predator_mod_dat<-data.frame(predator_dNNdt=predator_dNNdt,
predator=predator_lagged$laggedx, prey=prey_lagged$laggedx)
mod_predator<-lm(predator_dNNdt~predator+prey, data=predator_mod_dat)
# model summaries
summary(mod_prey)
summary(mod_predator)
# extract parameters
# growth rates
r1 <- unname(coef(mod_prey)["(Intercept)"])
r2 <- unname(coef(mod_predator)["(Intercept)"])
r2
# self-limitation
a11 <- unname(coef(mod_prey)["prey"])
a22 <- unname(coef(mod_predator)["predator"])
# effect of Pa on Pc
a12 <- unname(coef(mod_prey)["predator"])
# effect of Pc on Pa
a21 <- unname(coef(mod_predator)["prey"])
# run ODE:
# make parameter vector:
parms <- c(r1, r2, a11, a12, a21, a22)
initialN <- c(4, 0.1) #this is just a basic and standard starting point
out <- deSolve::ode(y=initialN, times=seq(1995, 2019, length=25), func=lv_interaction, parms=parms)
matplot(out[,1], out[,-1], type="l",
xlab="time", ylab="N", col=c("black","red"), lty=c(1,3), lwd=2, ylim=c(0, 250))
legend("topright", c("Deer", "Mountain Lion"), col=c(1,2), lwd=2, lty=c(1,3))
# now, plot in points from data
points(ml_deer$year, ml_deer$ml_sight , col=2)
points(ml_deer$year, ml_deer$deer4, col=1)
opt_data<-data.frame(time=ml_deer$year, Prey=ml_deer$deer4,
Predator=ml_deer$ml_sight)
# Save the signs of the parameters -
# optimizer works in log space, so these
# must be specified separately
parm_signs<-sign(parms)
# parameter vector for optimizer -
# must be a vector with, first, the
# starting abundances in log space,
# and second, the parameter values,
# again in log space
pars<-c(log(initialN), log(abs(parms)))
# run optimizer
optout<-optim(par = pars, fn = lv_optim, hessian = TRUE,
opt_data=opt_data, parm_signs=parm_signs)
# extract parameter vector:
parms <- exp(optout$par[-c(1:2)])*parm_signs
initialN <- exp(optout$par[1:2])
out <- deSolve::ode(y=initialN, times=seq(1995, 2019, length=25), func=lv_interaction, parms=parms)
matplot(out[,1], out[,-1], type="l",
xlab="time", ylab="N", col=c("black","red"), lty=c(1,3), lwd=2, ylim=c(0, 250))
legend("topright", c("Deer", "Mountain Lion"), col=c(1,2), lwd=2, lty=c(1,3))
# now, plot in points from data
points(ml_deer$year, ml_deer$ml_sight , col=2)
points(ml_deer$year, ml_deer$deer4, col=1)
#extract time and species data
time<-ml_deer$year
species<-data.frame(ml_deer$deer4, ml_deer$ml_sight)
colnames(species)<-c("Deer", "Mountain_Lions")
#run wrapper
gause_out<-gause_wrapper(time=time, species=species)
summary(gause_out)
gause_out
# I hate R-base figures, so export the results and I will make new ones:
p<- as.data.frame(gause_out$out)
plot(p$time, p$Deer)
plot(p$Mountain_Lions, p$Deer)
ml_deer<- read.csv("C:/Users/mason/Dropbox/git/students/Rachel Dziuba/data/deer_ml_data.csv")
require(gauseR)
# tell R what  what pred/prey is, and what time vector is
prey_lagged<-get_lag(x = ml_deer$deer4, time = ml_deer$year)
predator_lagged<-get_lag(x = ml_deer$ml_sight, time = ml_deer$year)
# calculate percapita growth rates for each
prey_dNNdt<-percap_growth(x = prey_lagged$x, laggedx = prey_lagged$laggedx, dt = prey_lagged$dt)
predator_dNNdt<-percap_growth(x = predator_lagged$x,
laggedx = predator_lagged$laggedx, dt = predator_lagged$dt)
# fit linear models to dNNdt, based on average
# abundances between current and lagged time steps
prey_mod_dat<-data.frame(prey_dNNdt=prey_dNNdt, prey=prey_lagged$laggedx,
predator=predator_lagged$laggedx)
mod_prey<-lm(prey_dNNdt~prey+predator, data=prey_mod_dat)
predator_mod_dat<-data.frame(predator_dNNdt=predator_dNNdt,
predator=predator_lagged$laggedx, prey=prey_lagged$laggedx)
mod_predator<-lm(predator_dNNdt~predator+prey, data=predator_mod_dat)
# model summaries
summary(mod_prey) #ptttt, looks like crap.
summary(mod_predator) # slightly worse than crap.
# extract parameters
# growth rates
r1 <- unname(coef(mod_prey)["(Intercept)"])
r2 <- unname(coef(mod_predator)["(Intercept)"])
# self-limitation
a11 <- unname(coef(mod_prey)["prey"])
a22 <- unname(coef(mod_predator)["predator"])
# effect of Pa on Pc
a12 <- unname(coef(mod_prey)["predator"])
# effect of Pc on Pa
a21 <- unname(coef(mod_predator)["prey"])
# run ODE:
# make parameter vector:
parms <- c(r1, r2, a11, a12, a21, a22)
initialN <- c(4, 0.1) #this is just a basic and standard starting point
out <- deSolve::ode(y=initialN, times=seq(1995, 2019, length=25), func=lv_interaction, parms=parms)
matplot(out[,1], out[,-1], type="l",
xlab="time", ylab="N", col=c("black","red"), lty=c(1,3), lwd=2, ylim=c(0, 250))
legend("topright", c("Deer", "Mountain Lion"), col=c(1,2), lwd=2, lty=c(1,3))
# now, plot in points from data
points(ml_deer$year, ml_deer$ml_sight , col=2)
points(ml_deer$year, ml_deer$deer4, col=1)
ml_deer<- read.csv("C:/Users/mason/Dropbox/git/students/Rachel Dziuba/data/deer_ml_data.csv")
require(gauseR)
# tell R what  what pred/prey is, and what time vector is
prey_lagged<-get_lag(x = ml_deer$deer4, time = ml_deer$year)
predator_lagged<-get_lag(x = ml_deer$ml_sight, time = ml_deer$year)
# calculate percapita growth rates for each
prey_dNNdt<-percap_growth(x = prey_lagged$x, laggedx = prey_lagged$laggedx, dt = prey_lagged$dt)
predator_dNNdt<-percap_growth(x = predator_lagged$x,
laggedx = predator_lagged$laggedx, dt = predator_lagged$dt)
# fit linear models to dNNdt, based on average
# abundances between current and lagged time steps
prey_mod_dat<-data.frame(prey_dNNdt=prey_dNNdt, prey=prey_lagged$laggedx,
predator=predator_lagged$laggedx)
mod_prey<-lm(prey_dNNdt~prey+predator, data=prey_mod_dat)
predator_mod_dat<-data.frame(predator_dNNdt=predator_dNNdt,
predator=predator_lagged$laggedx, prey=prey_lagged$laggedx)
mod_predator<-lm(predator_dNNdt~predator+prey, data=predator_mod_dat)
# model summaries
summary(mod_prey) #ptttt, looks like crap.
summary(mod_predator) # slightly worse than crap.
# extract parameters
# growth rates
r1 <- unname(coef(mod_prey)["(Intercept)"])
r2 <- unname(coef(mod_predator)["(Intercept)"])
# self-limitation
a11 <- unname(coef(mod_prey)["prey"])
a22 <- unname(coef(mod_predator)["predator"])
# effect of Pa on Pc
a12 <- unname(coef(mod_prey)["predator"])
# effect of Pc on Pa
a21 <- unname(coef(mod_predator)["prey"])
# run ODE:
# make parameter vector:
parms <- c(r1, r2, a11, a12, a21, a22)
initialN <- c(4, 0.1) #this is just a basic and standard starting point
out <- deSolve::ode(y=initialN, times=seq(1995, 2019, length=25), func=lv_interaction, parms=parms)
matplot(out[,1], out[,-1], type="l",
xlab="time", ylab="N", col=c("black","red"), lty=c(1,3), lwd=2, ylim=c(0, 250))
legend("topright", c("Deer", "Mountain Lion"), col=c(1,2), lwd=2, lty=c(1,3))
# now, plot in points from data
points(ml_deer$year, ml_deer$ml_sight , col=2)
points(ml_deer$year, ml_deer$deer4, col=1)
parms
names(parms)
require(gauseR)
citation("gauseR")
?ode
citation(ode)
citation("ode")
citation()
library('esc')
citation("esc")
install.packages(c("car", "DHARMa", "dplyr", "emmeans", "ggplot2", "glmmTMB"))
# clear R history
rm(list =ls())
?rm
?list
?ls
# Load iris data - this will be replaced with YOUR OWN data eventually
data(iris)
# View entire iris data set - 150 rows and 5 columns
iris
# Check "dimensions" of data frame 'iris'
dim(iris)
# View first few rows of data frame 'iris'
head(iris)
head(iris, n=5)
head(iris, n=15)
tail(iris)
tail(iris, n=15)
# What are the names of the column headings?
names(iris)
hist(iris$Sepal.Length)
mean(iris$Sepal.Length)
sd(iris$Sepal.Length)
library(ggplot2)
#isolate only species setosa
setosa<- subset(iris, Species=="setosa")
ggplot(setosa, aes(x = Petal.Length)) +
geom_bar(stat="count", fill = "firebrick") +
labs(x = "", y = "Frequency") +
theme_classic()
boxplot(iris$Sepal.Length)
boxplot(iris)
median(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species))
legend(pch=as.numeric(iris$Species))
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species)),
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species),
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species),
legend(pch=as.numeric(iris$Species)))
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species)
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species))
?legend
data(iris)
# View entire iris data set - 150 rows and 5 columns
iris
# Check "dimensions" of data frame 'iris'
dim(iris)
# View first few rows of data frame 'iris'
head(iris)
tail(iris, n = 7)
# What are the names of the column headings?
names(iris)
######################################################################3
#
# Generate some exploratory/descriptive statistics for iris data
#
# Note, best to look at one variable (column) at a time, so use '$' to
# tell R that your are asking about one specific variable
hist(iris$Sepal.Length)
mean(iris$Sepal.Length)
sd(iris$Sepal.Length)
#make a nicer figure with the ggplot package
install.packages("ggplot2")
library(ggplot2)
#isolate only species setosa
setosa<- subset(iris, Species=="setosa")
ggplot(setosa, aes(x = Petal.Length)) +
geom_bar(stat="count", fill = "firebrick") +
labs(x = "", y = "Frequency") +
theme_classic()
boxplot(iris$Sepal.Length)
boxplot(iris)
median(iris$Sepal.Length)
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species))
?plot
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species), col=as.numeric(iris$Species))
#unique colors
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species), col=as.numeric(iris$Species))
legend(x = "topleft",           # Position
iris$Species,            # Legend texts
lty = c(1, 2),           # Line types
col = c(2, 3),           # Line colors
lwd = 2)
legend(x = "topleft",           # Position
legend= iris$Species,            # Legend texts
lty = c(1, 2),           # Line types
col = c(2, 3),           # Line colors
lwd = 2)
#unique colors
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species), col=as.numeric(iris$Species))
legend(x = "topleft",           # Position
legend= as.numeric(iris$Species),            # Legend texts
lty = c(1, 2),           # Line types
col = c(2, 3),           # Line colors
lwd = 2)
#unique colors
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species), col=as.numeric(iris$Species))
legend(x = "topleft",           # Position
legend= as.factor(iris$Species),            # Legend texts
lty = c(1, 2),           # Line types
col = c(2, 3),           # Line colors
lwd = 2)
#unique colors
plot(iris$Sepal.Length, iris$Petal.Width, pch=as.numeric(iris$Species), col=as.numeric(iris$Species))
legend("topleft", # specify the location of the legend
levels(iris$Species), # specify the levels of species
pch = 1:3, # specify three symbols used for the three species
col = 1:3 # specify three colors for the three species
)
citation(emmeans)
citation("emmeans")
#packages you will need
#install.packages("emmeans", dependencies = TRUE) # only if not yet installed
library(ggplot2)
library(dplyr)
#install.packages("emmeans", dependencies = TRUE)
library(emmeans)
# download data NOTE: replace this with your own data
circadian <- read.csv(url("https://whitlockschluter3e.zoology.ubc.ca/Data/chapter15/chap15e1KneesWhoSayNight.csv"), stringsAsFactors = FALSE)
# Order the groups
circadian$treatment <- factor(circadian$treatment,
levels = c("control", "knee", "eyes"))
#Descriptive statistics
circadianStats <- summarize(group_by(circadian, treatment),
Mean = mean(shift, na.rm = TRUE),
s = sd(shift, na.rm = TRUE),
n = n())
data.frame(circadianStats)
# Make basic plot
ggplot(circadian, aes(x = treatment, y = shift)) +
geom_point(color = "firebrick", size = 3, shape = 1) +
labs(x = "Light treatment", y = "Height (cm)") +
theme_classic()
#standard error bars
ggplot(circadian, aes(x = treatment, y = shift)) +
geom_point(color = "firebrick", size = 3, shape = 1) +
stat_summary(fun.data = mean_se, geom = "errorbar",
colour = "black", width = 0.1,
position=position_nudge(x = 0.15)) +
stat_summary(fun.y = mean, geom = "point",
colour = "firebrick", size = 3,
position=position_nudge(x = 0.15)) +
labs(x = "Light treatment", y = "Shift in circadian rhythm (h)") +
theme_classic()
# Analysis of variance
circadianAnova <- lm(shift ~ treatment, data = circadian)
anova(circadianAnova)
#planned comparison
circadianPairs <- emmeans(circadianAnova, specs = "treatment")
circadianPlanned <- contrast(circadianPairs, method = "pairwise",
adjust = "none")
circadianPlanned
plot(circadianPairs)
dat<- c(70, 56.5, 66, 97, 99, 104, 88, 91.5, 99, 74, 81, 63.5)
dat
hist(dat)
plot(density(dat))
dat<-c(70, 56.5, 66, 97, 99, 104, 41, 88, 91.5, 99, 74, 81, 63.5, 68.5)
length(dat)
hist(dat)
library(DHARMa)
library(glmmTMB)
library(car)
library(emmeans)
dat<- read.csv("C:/Users/mkulbaba/Dropbox/git/students/Flores/flores_data.csv")
dat<- read.csv("C:/Users/mason/Dropbox/git/students/Flores/flores_data.csv")
head(dat)
dat2<- dat[1:7]
# set treatment as a factor
dat2$treat<- as.factor(dat2$treat)
# replace "NA" with 0
dat2[is.na(dat2)] <- 0
# histogram of wt
hist(dat2$wt)
#
a <- glmmTMB(wt ~ treat, data=dat2)
#
a <- glmmTMB(wt ~ treat, data=dat2)
b<- glmmTMB(wt ~ treat, data=dat2, family="negative binomial")
b<- glmmTMB(wt ~ treat, data=dat2, family="nb")
b<- glmmTMB(wt ~ treat, data=dat2, family="nbinom1")
anova(a, b)
c<- glmmTMB(wt ~ treat, data=dat2, family="genpois")
anova(a, b, c)
d<- glmmTMB(wt ~ treat, data=dat2, family="Gamma")
dat2$wt
d<- glmmTMB(wt ~ treat, data=dat2, family="Gamma")
anova(a, b, c, d)
anova(a, b, c)
anova(a, b, c)
summary(b)
summary(a)
se <- function(x) sd(x)/sqrt(length(x))
mean.w1<- aggregate(dat2$w1, by=list(dat2$treat), mean)
mean.w1
se.w1<- aggregate(dat2$w1, by=list(dat2$treat), se)
w1<- cbind(mean.w1, se.w1)
w1
mean.w1<- aggregate(dat2$w1, by=list(dat2$treat), mean)
se.w1<- aggregate(dat2$w1, by=list(dat2$treat), se)
w1<- cbind(mean.w1, se.w1)
mean.w2<- aggregate(dat2$w2, by=list(dat2$treat), mean)
se.w2<- aggregate(dat2$w2, by=list(dat2$treat), se)
w2<- cbind(mean.w2, se.w2)
mean.w3<- aggregate(dat2$w3, by=list(dat2$treat), mean)
se.w3<- aggregate(dat2$w3, by=list(dat2$treat), se)
w3- cbind(mean.w3, se.w3)
w3
w2
mean.w3<- aggregate(dat2$w3, by=list(dat2$treat), mean)
se.w3<- aggregate(dat2$w3, by=list(dat2$treat), se)
w3- cbind(mean.w3, se.w3)
w3<- cbind(mean.w3, se.w3)
mean.w4<- aggregate(dat2$w4, by=list(dat2$treat), mean)
se.w4<- aggregate(dat2$w4, by=list(dat2$treat), se)
w4<- cbind(mean.w4, se.w4)
means<- cbind(w1, w2, w3, w4)
write.table(means, "mean.csv", sep=",", quote=F, row.names = F)
write.table(means, "C:/Users/mason/Dropbox/git/students/Flores/mean.csv", sep=",", quote=F, row.names = F)
emmeans(a, "treat", type="response")
plot(emmeans(a, "treat"))
a <- glmmTMB(wt ~ treat, data=dat2)
summary(a)
a <- glmmTMB(wt ~ w4 + treat +w4*treat, data=dat2)
summary(a)
emmeans(a, "treat", type="response")
plot(emmeans(a, "treat"))
emmeans(a, "treat", type="response")
plot(emmeans(a, "treat"))
a <- glmmTMB(wt ~ treat, data=dat2)
summary(a)
plot(emmeans(a, "treat"))
contrast(emmeans(a, "treat"))
pairs(emmeans(a, "treat"))
emmeans(a, "treat", type="response")
mean.wt<- aggregate(dat2$wt, by=list(dat2$treat), mean)
se.wt<- aggregate(dat2$wt, by=list(dat2$treat), se)
mean.se.wt<- cbind(mean.wt, se.wt)
mean.se.wt
citation("emmeans")
citation("glmmTMB")
AIC(a, b, c) # ok close enough for Gaussian
Anova(a)
# personal computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/flores_ecology/flores_data.csv")
# personal computer
dat<- read.csv("C:/Users/mason/Dropbox/git/students/flores_ecology/flores_guppy.csv")
head(dat)
version
citation
citation(\)
citation()
citation(car)
library(car)
citation(car)
select(1:2)
?select
?rnorm
?sample
sample(1:2, 1
sample(1:2, 1)
sample(1:2, 1)
sample(1:2, 1)
sers/mason/Dropbox/git/geum-aster")
dat<- read.csv("final_data.csv")
setwd("C:/Users/mason/Dropbox/git/geum-aster")
dat<- read.csv("final_data.csv")
library(MASS)
library(lme4)
#####################################
#
# Questions to resolve:
#   1. h2 / CVa for Germination.Y.N (a 0/1 variable).
#
##################
#Begin with Germination
#subset by region
dat.gla<- subset(dat, Region=="GL_alvar")
dat.mba<- subset(dat, Region=="MB_alvar")
dat.pr<- subset(dat, Region=="Prairie")
#black as factor
dat.gla$Block.ID<- as.factor(dat.gla$Block.ID)
dat.mba$Block.ID<- as.factor(dat.mba$Block.ID)
dat.pr$Block.ID<- as.factor(dat.pr$Block.ID)
#models for : GL_alvar
gla_flw2016<- glmer.nb(No.Flowers.2016 ~ Block.ID +Population + (1|Family.Unique)
+ Block.ID : (1|Family.Unique),
data=dat.gla)
dat.gla<- subset(dat, Region=="GL_alvar")
dat.mba<- subset(dat, Region=="MB_alvar")
dat.pr<- subset(dat, Region=="Prairie")
#make block a factor
dat.gla$Block.ID<- as.factor(dat.gla$Block.ID)
dat.mba$Block.ID<- as.factor(dat.mba$Block.ID)
dat.pr$Block.ID<- as.factor(dat.pr$Block.ID)
#remove na i.e., omit if did not germinate
dat.gla<- dat.gla[!is.na(dat.gla$no.Planting.to.DTFF), ]
nor<- fitdistr(dat.gla$no.Planting.to.DTFF, "normal")
nb<- fitdistr(dat.gla$no.Planting.to.DTFF, "negative binomial")
po<- fitdistr(dat.gla$no.Planting.to.DTFF, "poisson")
ga<- fitdistr(dat.gla$no.Planting.to.DTFF, "gamma")
AIC(nor, nb, po, ga)#nb
#models for : GL_alvar
gla_DTFF2016<- glmer.nb(no.Planting.to.DTFF ~ Block.ID +Population+ (1|Family.Unique)
+ Block.ID : (1|Family.Unique),
data=dat.gla, tol=1e-1,
control=glmerControl(optimizer="Nelder_Mead",
optCtrl=list(maxfun=1e5)))
#models for : GL_alvar
gla_DTFF2016<- glmer.nb(no.Planting.to.DTFF ~ Block.ID +Population+ (1|Family.Unique)
+ Block.ID : (1|Family.Unique),
data=dat.gla, control=glmerControl(optimizer="Nelder_Mead",
optCtrl=list(maxfun=1e5)))
isSingular(gla_DTFF2016)#False
summary(gla_DTFF2016)# false pos for "fail to converge", identical estimates with diff optim
